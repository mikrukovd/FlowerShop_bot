import random
from asgiref.sync import sync_to_async
from . import states_bot
from .utils_handler import (
    send_pdf, format_date_for_display,
    format_time_for_display, send_order_to_courier, send_consultation_to_florist
)
from ptb.keyboards.keyboard import (
    shade_menu_kb, price_kb, choose_flowers_kb, delivery_date_kb,
    confirm_order_kb, main_menu_kb, yes_no_kb, occasions,
    generate_remove_flower_kb, opd_kb, all_flowers_kb, generate_delivery_time_kb,
    back_to_main_menu_kb
)
from core.services import (
    get_all_colors, get_bouquets, get_bouquet,
    get_all_bouquets, get_bouquet_composition_names
)

async_get_all_colors = sync_to_async(get_all_colors)
async_get_bouquets = sync_to_async(get_bouquets)
async_get_bouquet = sync_to_async(get_bouquet)
async_get_all_bouquets = sync_to_async(get_all_bouquets)
async_get_bouquet_composition_names = sync_to_async(get_bouquet_composition_names)
async_generate_remove_flower_kb = sync_to_async(generate_remove_flower_kb)


async def handler_main_menu(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é'''
    query = update.callback_query
    await query.answer()

    if query.data == "any_reason":
        await query.edit_message_text(
            text="–ù–∞–ø–∏—à–∏—Ç–µ, –∫ –∫–∞–∫–æ–º—É —Å–æ–±—ã—Ç–∏—é –≥–æ—Ç–æ–≤–∏–º—Å—è?",
            reply_markup=None
        )
        return states_bot.OTHER_EVENT

    elif query.data.startswith("occasion_"):
        occasion_id = query.data.replace("occasion_", "")

        for occasion in occasions:
            if str(occasion.id) == occasion_id:
                context.user_data['event'] = occasion.name
                context.user_data['occasion_id'] = occasion_id
                break

    await query.edit_message_text(
        text="–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–±–µ—Ä–µ–º –æ—Ç—Ç–µ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ –¥—É—à–µ:",
        reply_markup=shade_menu_kb
    )
    return states_bot.SHADE_MENU


async def handler_shade_menu(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –æ—Ç—Ç–µ–Ω–∫–æ–≤'''
    query = update.callback_query
    await query.answer()

    if query.data.startswith("color_"):
        color_id = query.data.replace("color_", "")

        colors = await async_get_all_colors()

        for color in colors:
            if str(color.id) == color_id:
                context.user_data['color'] = color.name
                context.user_data['color_id'] = color_id
                break
        else:
            context.user_data['color'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
            context.user_data['color_id'] = None

    await query.edit_message_text(
        text="–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç–µ?",
        reply_markup=price_kb
    )
    return states_bot.PRICE_MENU


async def handler_price_menu(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Ü–µ–Ω'''
    query = update.callback_query
    await query.answer()

    occasion_id = context.user_data.get('occasion_id')
    color_id = context.user_data.get('color_id')

    price_filters = {}

    if query.data == "price_500":
        price_filters = {'start_price': 0, 'end_price': 500}
    elif query.data == "price_1000":
        price_filters = {'start_price': 501, 'end_price': 1000}
    elif query.data == "price_2000":
        price_filters = {'start_price': 1001, 'end_price': 2000}
    elif query.data == "price_more":
        price_filters = {'start_price': 2001}
    elif query.data == "price_any":
        price_filters = {}

    bouquets = await async_get_bouquets(
        occasion=occasion_id,
        color=color_id,
        **price_filters
    )

    if bouquets:
        bouquet = random.choice(bouquets)
        context.user_data['selected_bouquet'] = bouquet.id

        composition_names = await async_get_bouquet_composition_names(bouquet)
        composition_text = ", ".join(composition_names)

        text = (f"üå∏ *{bouquet.name}* üå∏\n\n"
                f"{bouquet.discription}\n\n"
                f"*–°–æ—Å—Ç–∞–≤:* {composition_text}\n"
                f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {bouquet.price} —Ä—É–±.\n\n"
                "*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?* –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞")
    else:
        text = ("üòî *–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ*\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤—Å—é –Ω–∞—à—É –∫–æ–ª–ª–µ–∫—Ü–∏—é")
        context.user_data['selected_bouquet'] = None

    await query.edit_message_text(
        text=text,
        reply_markup=choose_flowers_kb,
        parse_mode='Markdown'
    )
    return states_bot.FLOWERS


async def handler_flowers(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –±—É–∫–µ—Ç–∞'''
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_flowers":
        if not context.user_data.get('selected_bouquet'):
            await query.edit_message_text(
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –±—É–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
                reply_markup=main_menu_kb
            )
            return states_bot.MAIN_MENU

        text = "–•–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∫–∞–∫–æ–π-–Ω–∏–±—É–¥—å —Ü–≤–µ—Ç–æ–∫ –∏–∑ –±—É–∫–µ—Ç–∞?"
        await query.edit_message_text(
            text=text,
            reply_markup=yes_no_kb
        )
        return states_bot.REMOVE_FLOWER

    elif query.data == "all_flowers":
        await query.edit_message_text(
            text="üå∏ *–í—Å—è –Ω–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –±—É–∫–µ—Ç–æ–≤:*",
            reply_markup=all_flowers_kb,
            parse_mode='Markdown'
        )
        return states_bot.ALL_FLOWERS

    elif query.data.startswith("bouquet_"):
        bouquet_id = query.data.replace("bouquet_", "")

        selected_bouquet = await async_get_bouquet(int(bouquet_id))
        context.user_data['selected_bouquet'] = selected_bouquet.id

        composition_names = await async_get_bouquet_composition_names(selected_bouquet)
        composition_text = ", ".join(composition_names)

        text = (f"üå∏ *{selected_bouquet.name}* üå∏\n\n"
                f"{selected_bouquet.discription}\n\n"
                f"*–°–æ—Å—Ç–∞–≤:* {composition_text}\n"
                f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {selected_bouquet.price} —Ä—É–±.\n\n"
                "*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?* –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞")

        await query.edit_message_text(
            text=text,
            reply_markup=choose_flowers_kb,
            parse_mode='Markdown'
        )
        return states_bot.FLOWERS

    elif query.data == "need_consult":
        await query.delete_message()
        await send_pdf(query, opd_kb)
        return states_bot.OPD_CONSULT

    return states_bot.FLOWERS


async def handler_all_flowers(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –±—É–∫–µ—Ç–æ–≤'''
    query = update.callback_query
    await query.answer()

    if query.data.startswith("bouquet_"):
        bouquet_id = query.data.replace("bouquet_", "")

        selected_bouquet = await async_get_bouquet(int(bouquet_id))
        context.user_data['selected_bouquet'] = selected_bouquet.id

        composition_names = await async_get_bouquet_composition_names(selected_bouquet)
        composition_text = ", ".join(composition_names)

        text = (f"üå∏ *{selected_bouquet.name}* üå∏\n\n"
                f"{selected_bouquet.discription}\n\n"
                f"*–°–æ—Å—Ç–∞–≤:* {composition_text}\n"
                f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {selected_bouquet.price} —Ä—É–±.\n\n"
                "*–•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –µ—â–µ –±–æ–ª–µ–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ?* –ü–æ–¥–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –±—É–∫–µ—Ç –∏–∑ –Ω–∞—à–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–ª–∏ –∑–∞–∫–∞–∂–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Ñ–ª–æ—Ä–∏—Å—Ç–∞")

        await query.edit_message_text(
            text=text,
            reply_markup=choose_flowers_kb,
            parse_mode='Markdown'
        )
        return states_bot.FLOWERS

    return states_bot.ALL_FLOWERS


async def handler_remove_flower(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∫–∞'''
    query = update.callback_query
    await query.answer()

    if query.data == "yes":
        selected_bouquet_id = context.user_data.get('selected_bouquet')

        if not selected_bouquet_id:
            await query.edit_message_text(
                text="‚ùå –û—à–∏–±–∫–∞: –±—É–∫–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω",
                reply_markup=main_menu_kb
            )
            return states_bot.MAIN_MENU

        remove_flower_kb = await async_generate_remove_flower_kb(selected_bouquet_id)

        text = "–ö–∞–∫–æ–π —Ü–≤–µ—Ç–æ–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–±—Ä–∞—Ç—å –∏–∑ –±—É–∫–µ—Ç–∞?"
        await query.edit_message_text(
            text=text,
            reply_markup=remove_flower_kb
        )
        return states_bot.REMOVE_FLOWER

    elif query.data == "no":
        await query.delete_message()
        await send_pdf(query, opd_kb)
        return states_bot.OPD

    elif query.data.startswith("remove_"):
        removed_flower = query.data.replace("remove_", "")

        if removed_flower != "nothing":
            context.user_data['removed_flower'] = removed_flower

        await query.delete_message()
        await send_pdf(query, opd_kb)
        return states_bot.OPD

    return states_bot.REMOVE_FLOWER


async def handler_opd(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å –û–ü–î'''
    query = update.callback_query
    await query.answer()

    if query.data == "accept":
        await query.delete_message()
        await query.message.reply_text("üìù –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return states_bot.NAME

    elif query.data == "decline":
        text = '''‚ú® *–ü—Ä–µ–≤—Ä–∞—Ç–∏–º —ç–º–æ—Ü–∏–∏ –≤ —Ü–≤–µ—Ç—ã!*

–ö–∞–∂–¥—ã–π –±—É–∫–µ—Ç ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è. –î–ª—è –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É?
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –ø–æ–≤–æ–¥—ã –Ω–∏–∂–µ
‚Ä¢ –ò–ª–∏ —Å–≤–æ–π –æ—Å–æ–±–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π'''
        await query.delete_message()
        await query.message.reply_text(text=text, reply_markup=main_menu_kb)
        return states_bot.MAIN_MENU

    return states_bot.OPD


async def handler_name(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏'''
    context.user_data['name'] = update.message.text
    await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:")
    return states_bot.PHONE


async def handler_phone(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞'''
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("üè† –ù–∞ –∫–∞–∫–æ–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∏—Ç—å –±—É–∫–µ—Ç?")
    return states_bot.ADDRESS


async def handler_address(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞'''
    context.user_data['address'] = update.message.text
    await update.message.reply_text(
        "üìÖ –ù–∞ –∫–∞–∫—É—é –¥–∞—Ç—É –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É?",
        reply_markup=delivery_date_kb
    )
    return states_bot.DATE


async def handler_date(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã'''
    query = update.callback_query
    await query.answer()

    context.user_data['date'] = query.data
    delivery_time_kb = generate_delivery_time_kb(query.data)
    await query.edit_message_text(
        text="‚è∞ –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –≤–∞–º –±—É–¥–µ—Ç —É–¥–æ–±–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=delivery_time_kb
    )
    return states_bot.TIME


async def handler_time(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏'''
    query = update.callback_query
    await query.answer()

    context.user_data['time'] = query.data

    raw_date = context.user_data.get('date', '')
    formatted_date = format_date_for_display(raw_date)

    raw_time = context.user_data.get('time', '')
    formatted_time = format_time_for_display(raw_time)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
    order_summary = f"""
‚úÖ *–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑:*

*–°–æ–±—ã—Ç–∏–µ:* {context.user_data.get('event', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
*–ò–º—è:* {context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
*–¢–µ–ª–µ—Ñ–æ–Ω:* {context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
*–ê–¥—Ä–µ—Å:* {context.user_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
*–î–∞—Ç–∞:* {formatted_date}
*–í—Ä–µ–º—è:* {formatted_time}
*–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:* –£–±—Ä–∞—Ç—å {context.user_data.get('removed_flower', '–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π')}
*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1500 —Ä—É–±.

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    await query.edit_message_text(
        text=order_summary,
        reply_markup=confirm_order_kb,
        parse_mode='Markdown'
    )
    return states_bot.CONFIRM_ORDER


async def handler_confirm_order(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'''
    query = update.callback_query
    await query.answer()

    if query.data == "confirm_order":
        await query.edit_message_text(
            text="üéâ *–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!* –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –û–∂–∏–¥–∞–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=back_to_main_menu_kb,
            parse_mode='Markdown'
        )
        # await send_order_to_courier(context, courier_chat_id=)  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID —á–∞—Ç–∞ –∫—É—Ä—å–µ—Ä–∞
        # TODO: –í–Ω–µ—Å–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        return states_bot.ORDER_COMPLETED

    elif query.data == "cancel_order":
        await query.edit_message_text(
            text="‚ùå *–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.* –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –±—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å —Å –≤—ã–±–æ—Ä–æ–º –±—É–∫–µ—Ç–∞!",
            reply_markup=back_to_main_menu_kb,
            parse_mode='Markdown'
        )
        return states_bot.ORDER_COMPLETED

    return states_bot.CONFIRM_ORDER


async def handler_back_to_main(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'''
    query = update.callback_query
    await query.answer()
    text = '''‚ú® *–ü—Ä–µ–≤—Ä–∞—Ç–∏–º —ç–º–æ—Ü–∏–∏ –≤ —Ü–≤–µ—Ç—ã!*

–ö–∞–∂–¥—ã–π –±—É–∫–µ—Ç ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è. –î–ª—è –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É?
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –ø–æ–≤–æ–¥—ã –Ω–∏–∂–µ
‚Ä¢ –ò–ª–∏ —Å–≤–æ–π –æ—Å–æ–±–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π'''

    await query.edit_message_text(
        text=text,
        reply_markup=main_menu_kb
    )
    return states_bot.MAIN_MENU


async def handler_other_event(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥—Ä—É–≥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è'''
    context.user_data['event'] = update.message.text
    context.user_data['occasion_id'] = None
    await update.message.reply_text(
        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –¢–µ–ø–µ—Ä—å –ø–æ–¥–±–µ—Ä–µ–º –æ—Ç—Ç–µ–Ω–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –ø–æ –¥—É—à–µ:",
        reply_markup=shade_menu_kb
    )
    return states_bot.SHADE_MENU


async def handler_opd_consult(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–≥–ª–∞—Å–∏—è —Å –û–ü–î –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'''
    query = update.callback_query
    await query.answer()

    if query.data == "accept":
        await query.delete_message()
        await query.message.reply_text("üìù –ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        return states_bot.NAME_CONSULT

    elif query.data == "decline":
        text = '''‚ú® *–ü—Ä–µ–≤—Ä–∞—Ç–∏–º —ç–º–æ—Ü–∏–∏ –≤ —Ü–≤–µ—Ç—ã!*

–ö–∞–∂–¥—ã–π –±—É–∫–µ—Ç ‚Äî —ç—Ç–æ –∏—Å—Ç–æ—Ä–∏—è. –î–ª—è –∫–∞–∫–æ–≥–æ –º–æ–º–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à—É?
‚Ä¢ –ì–æ—Ç–æ–≤—ã–µ –ø–æ–≤–æ–¥—ã –Ω–∏–∂–µ
‚Ä¢ –ò–ª–∏ —Å–≤–æ–π –æ—Å–æ–±–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π'''
        await query.delete_message()
        await query.message.reply_text(
            text=text,
            reply_markup=main_menu_kb
        )
        return states_bot.MAIN_MENU

    return states_bot.OPD_CONSULT


async def handler_name_consult(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'''
    context.user_data['consult_name'] = update.message.text
    await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∏ –Ω–∞—à —Ñ–ª–æ—Ä–∏—Å—Ç –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –≤–∞–º –≤ —Ç–µ—á–µ–Ω–∏–µ 20 –º–∏–Ω—É—Ç:")

    return states_bot.PHONE_CONSULT


async def handler_phone_consult(update, context):
    '''–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏'''
    context.user_data['consult_phone'] = update.message.text
    # await send_consultation_to_florist(context, florist_chat_id=)  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ ID —á–∞—Ç–∞ —Ñ–ª–æ—Ä–∏—Å—Ç–∞
    await update.message.reply_text(
        "‚úÖ *–§–ª–æ—Ä–∏—Å—Ç —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏!* –ê –ø–æ–∫–∞ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–∑ –≥–æ—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏:",
        reply_markup=all_flowers_kb,
        parse_mode='Markdown'
    )
    return states_bot.ALL_FLOWERS
